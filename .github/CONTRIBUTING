# コントリビュート

不具合、バグ修正や改善案など、どんなコントリビューション（参加）大歓迎です。

## 不具合やバグを見つけた

[このリポジトリの Issues](https://github.com/KEINOS/TMC-TESTS/issues) に報告ください。

- 新規報告（Issue といいます）は `New issue` ボタンから作成できます。
- すでに報告済みの Issue がある可能性もあります。まずは `Filters` 欄から検索してみてください。
- 新規作成する場合、タイトルは、タイトルだけで内容がなるべくわかるように記載してください。
  - NG なタイトルの例 →「動きません」「教えてください」
  - OK なタイトルの例 →「REG-003がWinだとUTF-8でも動きません」「Ubuntuで"Error response from daemon: pull access denied"エラー」
- 本文には、現象の再現方法や環境などを記載してください。また、同じ Issue を検索される方にもヒットするように書いてください。
- Issue に返信などリアクションがない場合は、忙しいか、内容の理解や再現に時間がかかっているので気長に待ってください。
- Issue 投稿後の編集も自由に行って結構です。

## 改善提案があります

- [このリポジトリの Issues](https://github.com/KEINOS/TMC-TESTS/issues) に報告ください。

## PR（Pull Request, プルリクエスト）

プログラムのバグ・フィックス、リファクタ、コメント追記など改修がある場合は、PR（プルリク）をお願いします。

一般的な PR の手順は以下の通りです。

1. このリポジトリを GitHub 上で「フォーク」します。画面右上の「Fork」ボタンを押すとフォーク（自分のアカウントにクローン）されます。
1. ローカルマシンにフォークをクローンします。
    - フォークされた Github 上の自分のレポジトリを `origin` と呼びます。
    - フォーク元のリポジトリ（このリポジトリ）は `upstream` と呼びます。
1. 作業前には、必ず　`upstream` の変更をローカルリポジトリに取り込んでください。（同期）
1. テストを実行します。（`./tests/run-tests-locally.sh`）
1. 作業ブランチを作成してください。ブランチ名から作業内容がわかるようにしてください。（「fix-issue-3-typo」など）
1. 作業ブランチ上で、機能を実装／修正／コメントなどを行います。
1. インデントを含め、リポジトリのコードスタイル（コーディング規約）に従います。（CodingGuidelines）
1. 必要に応じてテストの作成／修正をしてください。
1. 必要に応じてドキュメントを追加または変更してください。
1. 作業ブランチのコミットが冗長と感じた場合は、`git` の `rebase` を使用して、コミットを1つのコミットにまとめてください。
1. 作業ブランチを `origin` に `push` してフォーク（GitHub 上の自分のリポジトリ）に反映させてください。
1. GitHub 上のフォークから作業ブランチでプルリクエストを開きます。`upstream` プロジェクト `master` ブランチに対してプルリクを作成します。
    - このプロジェクトには `develop` ブランチはないので、`master` に PR してください。
1. メンテナや自動 CI から、さらなる変更（修正）を要求した場合は、それらをあなたのブランチにプッシュするだけで PR は自動的に更新されます。
1. PR が承認されてマージされたら、変更を `upstream` をローカルレポジトリに `pull` して作業ブランチを削除します。

### コミット・メッセージ

- コミット・メッセージは日本語でも英語でも構いません。
- コミット・メッセージは常に現在形で書いてください。
  - コミット・メッセージは、適用されたときにコミットがコードに対して行うことを説明するため、過去形だと見直した時にわかりづらくなるからです。
  - NG なコミット・メッセージ例 →「Fixed null division」
  - OK なコミット・メッセージ例 →「fix: null division」
- コミット・メッセージにプレフィックスをつけるとわかりやすくなります。
  - `fix:` → 不具合／バグなどの修正
  - `feat:` →　新規機能追加
  - `docs:` →　ドキュメントの修正／加筆
  - `typo:` →　打ちまつがいの修正
  - `refactor:` →　リファクタリング（動作は変わらないが、メンテナンスしやすくするためのコードの修正や構成変更）
  - `chore:` →　その他
