#!/usr/bin/env php
<?php
namespace TMC\REG001;

/**
 * REG-001:目視上、同じファイル名が重複しないか検証します。
 */

$msg_help = <<< EOL
Usage: REG-001 [OPTIONS] PATHS

受け取った「改行区切りの文字列」（PATHS）で、目視上同じ行がないか検証します。ファイル名が重複しないかなどの検証に使います。

Options:
  -     検証する文字列（PATHS）を引数でなく標準入力から受け取ります。
Paths:
        検証する文字列（PATHS）を指定します。改行区切りの文字列全体をクォートで囲うのを忘れないようにしてください。
EOL;

const SUCCESS = 0; //終了ステータス：成功
const FAILURE = 1; //終了ステータス：失敗（REGのIDと同じ）

if (! isset($argv[1])) {
    print_help();
    exit(FAILURE);
}

$lines_from_argv = $argv[1];
$is_input_stdin  = ($lines_from_argv === '-') ?: false;

if ($is_input_stdin) {
    while ($line = fgets(STDIN)) {
        $lines[] = $line;
    }
} else {
    $lines = explode(PHP_EOL, $lines_from_argv);
}

foreach ($lines as $line){
    if (is_duplicate($line)) {
        print_error('Duplicate line found:' . $line . PHP_EOL);
        exit(FAILURE);
    }
}

exit(SUCCESS); // Test Passed

function is_duplicate($string)
{
    static $list=[];

    // 全角スペースのトリム
    $string = mb_trim($string);
    // 大文字と小文字を区別
    $string = mb_strtolower($string);
    // ゼロ幅スペースを削除
    $string = remove_zwsp($string);
    // 配列の添字を固定長
    $hash   = substr(hash('sha256', $string), 0, 15);

    if (isset($list[$hash])) {
        return true;
    }

    $list[$hash] = true;
    return false;
}

function mb_trim($string)
{
    static $chars = "[\\x0-\x20\x7F\xC2\xA0\xE3\x80\x80]";
    $string = preg_replace("/\A{$chars}++|{$chars}++\z/u", '', $string);
    $string = str_replace(' ', '', $string);

    return $string;
}

function print_error($msg)
{
    fputs(STDERR, addslashes($msg));
}

function print_help()
{
    global $msg_help;
    print_error(PHP_EOL . trim($msg_help) . PHP_EOL . PHP_EOL);
}

function remove_zwsp($string)
{
    $string = str_replace('​', '', $string); //見えませんが ZWSP が入っています
    $string = str_replace('&#8203;', '', $string);
    $string = str_replace("\xE2\x80\x8B", '', $string);
    $string = str_replace("\xE2\x80\xAC", "", $string);
    return $string;
}
